import logging
import time
import json
import os
from functools import partial
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo, CallbackQuery, Message
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, CallbackContext, MessageHandler, filters
import re

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

TOKEN = ''
SUPPORT_URL = 'https://t.me/raihanhost'
CHANNEL_URL = 'https://t.me/raihanhost'
CHANNEL_ID = '-1002211482813'  # –í–∞—à –ø–æ–ª—É—á–µ–Ω–Ω—ã–π ID –∫–∞–Ω–∞–ª–∞
REFERRAL_LINK_TEMPLATE = 'https://1wqsg.com/v3/landing-page/casino?p=qpjg&sub1={user_id}'
WEBAPP_URL_RU = 'https://lambent-praline-c1cc52.netlify.app'
WEBAPP_URL_EN = 'https://lambent-praline-c1cc52.netlify.app/index_en'

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
registered_users = set()
SESSION_FILE = 'sessions.json'

application = Application.builder().token(TOKEN).build()

def load_sessions():
    if os.path.exists(SESSION_FILE):
        with open(SESSION_FILE, 'r') as f:
            data = json.load(f)
            return data
    return {}

def save_sessions(sessions):
    with open(SESSION_FILE, 'w') as f:
        json.dump(sessions, f)

def load_registered_users():
    sessions = load_sessions()
    return set(sessions.get('registered_users', []))

def save_registered_users():
    sessions = {
        'registered_users': list(registered_users)
    }
    save_sessions(sessions)

registered_users = load_registered_users()

def escape_html(text):
    escape_chars = {'<': '&lt;', '>': '&gt;', '&': '&amp;', '"': '&quot;'}
    return ''.join(escape_chars.get(char, char) for char in text)

def save_step(context, step, *args):
    if 'history' not in context.user_data:
        context.user_data['history'] = []
    if not context.user_data['history'] or context.user_data['history'][-1] != (step, args):
        context.user_data['history'].append((step, args))

def save_last_message(context, message):
    context.user_data['last_message'] = message

async def go_back(update: Update, context: CallbackContext) -> None:
    if 'history' in context.user_data and context.user_data['history']:
        context.user_data['history'].pop()  # Remove current step
        if context.user_data['history']:
            last_step, args = context.user_data['history'].pop()
            await last_step(update, context, *args)
            return
    await start(update, context)

async def start(update: Update, context: CallbackContext) -> None:
    save_step(context, start)
    keyboard = [
        [InlineKeyboardButton("–†—É—Å—Å–∫–∏–π", callback_data='lang_ru'), InlineKeyboardButton("English", callback_data='lang_eng')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    caption = '<b>–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫</b> / <b>Choose a language:</b>'
    message = await update.message.reply_photo(photo='lang.png', caption=caption, reply_markup=reply_markup, parse_mode='HTML') if update.message else await update.callback_query.message.reply_photo(photo='lang.png', caption=caption, reply_markup=reply_markup, parse_mode='HTML')
    save_last_message(context, message)

async def lang_selection(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    await query.answer()

    if query.data == 'lang_ru':
        context.user_data['lang'] = 'ru'
        await show_main_menu(query, context, 'ru')
    elif query.data == 'lang_eng':
        context.user_data['lang'] = 'eng'
        await show_main_menu(query, context, 'eng')

async def show_main_menu(query: CallbackQuery, context: CallbackContext, lang: str) -> None:
    save_step(context, partial(show_main_menu, lang=lang))
    try:
        await query.message.delete()
    except:
        pass

    if lang == 'ru':
        text = "<b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:</b>"
        play_text = "üïπÔ∏è–ò–≥—Ä–∞—Ç—å"
        support_text = "üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞"
        language_text = "üåê –°–º–µ–Ω–∞ —è–∑—ã–∫–∞"
    else:
        text = "<b>Main Menu:</b>"
        play_text = "üïπÔ∏èPlay"
        support_text = "üÜò Support"
        language_text = "üåê Change Language"

    keyboard = [
        [InlineKeyboardButton(play_text, callback_data='play')],
        [InlineKeyboardButton(language_text, callback_data='change_language'), InlineKeyboardButton(support_text, callback_data='support')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    last_message = context.user_data.get('last_message')
    if last_message:
        message = await last_message.reply_photo(photo='MainMenu.png' if lang == 'ru' else 'MainMenuEn.png', caption=text, reply_markup=reply_markup, parse_mode='HTML')
        save_last_message(context, message)

async def play_game(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    save_step(context, play_game)
    try:
        await query.message.delete()
    except:
        pass
    await query.answer()

    user_name = query.from_user.first_name
    user_id = query.from_user.id
    registration_url = REFERRAL_LINK_TEMPLATE.format(user_id=user_id)
    lang = context.user_data.get('lang', 'ru')

    if lang == 'ru':
        text = (f"üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! {user_name},\n\n"
                "–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –æ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:\n\n"
                "1. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç - –µ—Å–ª–∏ —É –í–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–∫–∏–Ω—å—Ç–µ –µ–≥–æ –∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ –Ω–æ–≤—ã–π.\n"
                f"2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ <b>LIBTY</b> –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞. –≠—Ç–æ –≤–∞–∂–Ω–æ, —Ç–∞–∫ –∫–∞–∫ –Ω–∞—à <b>–ò–ò</b> —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å –Ω–æ–≤—ã–º–∏ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏.\n"
                "3. –ü–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É <b>‚Äú–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é‚Äù</b>.\n"
                "4. –ï—Å–ª–∏ –í—ã –Ω–µ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —ç—Ç–∏ —à–∞–≥–∏, –Ω–∞—à –±–æ—Ç –Ω–µ —Å–º–æ–∂–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –≤ —Å–≤–æ—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º—ã–µ –∏–º —Å–∏–≥–Ω–∞–ª—ã –º–æ–≥—É—Ç –Ω–µ –ø–æ–¥–æ–π—Ç–∏.\n\n"
                "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–µ!")
        keyboard = [
            [InlineKeyboardButton("üì≤ –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø", url=registration_url)],
            [InlineKeyboardButton("üîç –ü–†–û–í–ï–†–ò–¢–¨ –†–ï–ì–ò–°–¢–†–ê–¶–ò–Æ", callback_data='check_registration')],
            [InlineKeyboardButton("üè° –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ", callback_data='main_menu')]
        ]
    else:
        text = (f"üëã Hello! {user_name},\n\n"
                "To get the most out of using this bot, you need to follow these steps:\n\n"
                "1. Register a new account - if you already have an account, please leave it and register a new one.\n"
                f"2. Use the promo code <b>LIBTY</b> when registering a new account. This is important because our <b>AI</b> only works with new accounts.\n"
                "3. After registration, click the <b>‚ÄúCheck Registration‚Äù</b> button.\n"
                "4. If you do not follow these steps, our bot will not be able to add your account to its database, and the signals it provides may not be suitable.\n\n"
                "Thank you for your understanding!")
        keyboard = [
            [InlineKeyboardButton("üì≤ REGISTRATION", url=registration_url)],
            [InlineKeyboardButton("üîç CHECK REGISTRATION", callback_data='check_registration')],
            [InlineKeyboardButton("üè° MAIN MENU", callback_data='main_menu')]
        ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    last_message = context.user_data.get('last_message')
    if last_message:
        message = await last_message.reply_photo(photo='play.png', caption=text, reply_markup=reply_markup, parse_mode='HTML')
        save_last_message(context, message)

async def check_registration(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    save_step(context, check_registration)
    user_id = query.from_user.id
    lang = context.user_data.get('lang', 'ru')
    try:
        await query.message.delete()
    except:
        pass
    await query.answer()

    logging.info(f"Checking registration for user_id: {user_id}")
    logging.info(f"Registered users: {registered_users}")

    if user_id in registered_users:
        text = "<b>–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª!\n–í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω</b> ‚úÖ" if lang == 'ru' else "<b>Now you can receive a signal!\nYour account has been successfully registered</b> ‚úÖ"
        keyboard = [
            [InlineKeyboardButton("–ù–∞—á–∞—Ç—å –∏–≥—Ä—É üïπ", web_app=WebAppInfo(url=WEBAPP_URL_RU))] if lang == 'ru' else [InlineKeyboardButton("Start Game", web_app=WebAppInfo(url=WEBAPP_URL_EN))],
            [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back')]
        ]
    else:
        text = "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ —à–∞–≥–∏ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞." if lang == 'ru' else "Registration is not complete. Please complete all steps and try again."
        keyboard = [
            [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back')]
        ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    message = await query.message.reply_text(text=text, reply_markup=reply_markup, parse_mode='HTML')
    save_last_message(context, message)

async def show_support(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    save_step(context, show_support)
    lang = context.user_data.get('lang', 'ru')
    try:
        await query.message.delete()
    except:
        pass
    await query.answer()

    if lang == 'ru':
        text = "üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞\n\n–ï—Å–ª–∏ —É –í–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –∫–∞–∫–∏–µ-–ª–∏–±–æ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–æ—Ç–æ–º, –ª–∏–±–æ –í—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –∑–∞–¥–∞—Ç—å –Ω–∞–º –≤–æ–ø—Ä–æ—Å ‚Äì –Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å —Ä–∞–¥–æ—Å—Ç—å—é –ø–æ–º–æ–∂–µ—Ç –í–∞–º —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è."
        keyboard = [
            [InlineKeyboardButton("–ù–∞–ø–∏—Å–∞—Ç—å", url=SUPPORT_URL)],
            [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back')]
        ]
    else:
        text = "üí¨ Support\n\nIf you have any difficulties using the bot or would like to ask us a question, our manager will be happy to help you."
        keyboard = [
            [InlineKeyboardButton("Message", url=SUPPORT_URL)],
            [InlineKeyboardButton("Back", callback_data='back')]
        ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    last_message = context.user_data.get('last_message')
    if last_message:
        message = await last_message.reply_photo(photo='SUPP.png' if lang == 'ru' else 'SUPPEN.png', caption=text, reply_markup=reply_markup, parse_mode='HTML')
        save_last_message(context, message)

async def change_language(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    save_step(context, change_language)
    try:
        await query.message.delete()
    except:
        pass
    await query.answer()
    await start(update, context)

async def main_menu(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    lang = context.user_data.get('lang', 'ru')
    await show_main_menu(query, context, lang)

class RegistrationSuccessFilter(filters.BaseFilter):
    def filter(self, message) -> bool:
        return str(message.chat_id) == CHANNEL_ID

async def log_all_channel_messages(update: Update, context: CallbackContext) -> None:
    if update.channel_post:
        message = update.channel_post.text
        logging.info(f"Received message: {message}")

        # –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è, —á—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å, –∫–∞–∫–∏–µ –∏–∑ –Ω–∏—Ö –±–æ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç
        logging.info(f"Channel message: {message}")

        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ–≥–æ
        if message.isdigit():
            user_id = int(message)
            registered_users.add(user_id)
            logging.info(f'User {user_id} successfully registered.')
            logging.info(f"Registered users: {registered_users}")
            save_registered_users()

def main() -> None:
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(lang_selection, pattern='^lang_'))
    application.add_handler(CallbackQueryHandler(play_game, pattern='^play$'))
    application.add_handler(CallbackQueryHandler(check_registration, pattern='^check_registration$'))
    application.add_handler(CallbackQueryHandler(show_support, pattern='^support$'))
    application.add_handler(CallbackQueryHandler(change_language, pattern='^change_language$'))
    application.add_handler(CallbackQueryHandler(go_back, pattern='^back$'))
    application.add_handler(CallbackQueryHandler(main_menu, pattern='^main_menu$'))
    application.add_handler(MessageHandler(RegistrationSuccessFilter(), log_all_channel_messages))

    application.run_polling()

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–µ—Ä–µ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º —Ä–∞–±–æ—Ç—ã
    save_registered_users()

if __name__ == '__main__':
    main()







